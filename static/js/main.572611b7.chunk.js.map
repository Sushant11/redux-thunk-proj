{"version":3,"sources":["actions/actionTypes.js","containers/App/AsyncComponent.js","route/PublicRoute.js","containers/App/index.js","utility/history.js","reducers/jokesReducer.js","reducers/index.js","store/appStore.js","serviceWorker.js","index.js"],"names":["JOKE_FETCH_REQUEST","JOKE_FETCH_REQUEST_SUCCESS","JOKE_FETCH_REQUEST_FAILURE","JOKE_CLEAN_REQUEST","AsyncAppLayout","loadable","AsyncJokes","AsyncInternalServer","AsyncNotFound","AsyncForbidden","PublicRoute","Component","component","Layout","layout","rest","render","props","withRouter","exact","path","history","createHistory","hashType","INITIAL_STATE","payload","loading","errors","jokesReducer","state","action","type","Object","assign","data","error","rootReducer","combineReducers","router","connectRouter","jokes","appStore","initialState","middlewares","thunk","routerMiddleware","createStore","composeWithDevTools","applyMiddleware","Boolean","window","location","hostname","match","mountNode","document","getElementById","store","ReactDOM","fallback","className","basename","process","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2FAAA,wIAAO,IAAMA,EAAqB,qBACrBC,EAA6B,6BAC7BC,EAA6B,6BAE7BC,EAAqB,sB,oLCFrBC,EAAiBC,aAAS,kBAAM,uDAEhCC,EAAaD,aAAS,kBAAM,qEAE5BE,EAAsBF,aAAS,kBAC1C,8DAEWG,EAAgBH,aAAS,kBACpC,+DAEWI,EAAiBJ,aAAS,kBACrC,8D,QCCaK,EAXK,SAAC,GAAD,IAAcC,EAAd,EAAGC,UAA8BC,EAAjC,EAAyBC,OAAmBC,EAA5C,6CAChB,kBAAC,IAAD,iBACQA,EADR,CAEIC,OAAQ,SAAAC,GAAK,OACT,kBAACJ,EAAD,KACI,kBAACF,EAAcM,SCqBhBC,eAjBH,kBACV,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEC,OAAK,EACLC,KAAK,IACLN,OAAQV,EACRQ,UAAWN,IAEb,kBAAC,EAAD,CAAac,KAAK,OAAQN,OAAQV,EAAgBQ,UAAWH,IAC7D,kBAAC,EAAD,CAAaW,KAAK,OAAQN,OAAQV,EAAgBQ,UAAWL,IAC7D,kBAAC,IAAD,CAAOa,KAAK,OAAQN,OAAQV,EAAgBQ,UAAWJ,IACvD,kBAAC,IAAD,CAAOI,UAAWJ,S,uCClBTa,EAHCC,YAAc,CAC5BC,SAAU,U,QCGNC,EAAgB,CAClBC,QAAS,GACTC,SAAS,EACTC,OAAQ,IAwCGC,EAlCM,SAACC,EAAOC,GAGzB,OAFAD,EAAQA,GAASL,EAETM,EAAOC,MACX,KAAK/B,IACD,OAAOgC,OAAOC,OAAO,GAAIJ,EAAO,CAC5BH,SAAS,IAGjB,KAAKzB,IACD,OAAO+B,OAAOC,OAAO,GAAIJ,EAAO,CAC5BJ,QAASK,EAAOI,KAChBR,SAAS,EACTC,OAAQ,KAGhB,KAAKzB,IACD,OAAO8B,OAAOC,OAAO,GAAIJ,EAAO,CAC5BH,SAAS,EACTC,OAAQG,EAAOK,QAGvB,KAAKhC,IACD,OAAO6B,OAAOC,OAAO,GAAIJ,EAAO,CAC5BJ,QAAS,GACTC,SAAS,EACTC,OAAQ,KAGhB,QACI,OAAOE,IClCJO,EALKC,0BAAgB,CAChCC,OAAQC,YAAclB,GACtBmB,MAAOZ,ICSIa,EAXE,WAAiC,IAAhCC,EAA+B,uDAAhB,GAAIrB,EAAY,uCAMvCsB,EAAc,CAAEC,IAAOC,YAAiBxB,IAE9C,OAAOyB,sBAAYV,EAAaM,EAAcK,8BAAoBC,kBAAe,WAAf,EAAmBL,MCHrEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNN,IAAMC,EAAYC,SAASC,eAAe,QACpCC,EAAQhB,EAAS,GAAIpB,GAE3BqC,IAAS1C,OACL,kBAAC,WAAD,CAAU2C,SAAU,yBAAKC,UAAU,oBAAf,mCAChB,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,IAAD,CAAiBpC,QAASA,GACtB,kBAAC,IAAD,CAAQwC,SAAUC,oBAAwBzC,QAASA,GAC/C,kBAAC,EAAD,UAKhBiC,GD0GE,kBAAmBS,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.572611b7.chunk.js","sourcesContent":["export const JOKE_FETCH_REQUEST = 'JOKE_FETCH_REQUEST';\nexport const JOKE_FETCH_REQUEST_SUCCESS = 'JOKE_FETCH_REQUEST_SUCCESS';\nexport const JOKE_FETCH_REQUEST_FAILURE = 'JOKE_FETCH_REQUEST_FAILURE';\n\nexport const JOKE_CLEAN_REQUEST = 'JOKE_CLEAN_REQUEST';","import loadable from \"@loadable/component\";\n\nexport const AsyncAppLayout = loadable(() => import(\"../../components/Layout\"));\n\nexport const AsyncJokes = loadable(() => import('../../containers/Jokes/'));\n\nexport const AsyncInternalServer = loadable(() =>\n  import(\"../../containers/Exception/InternalServerContainer\")\n);\nexport const AsyncNotFound = loadable(() =>\n  import(\"../../containers/Exception/NotFoundContainer\")\n);\nexport const AsyncForbidden = loadable(() =>\n  import(\"../../containers/Exception/ForbiddenContainer\")\n);\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst PublicRoute = ({ component: Component, layout: Layout, ...rest }) => (\n    <Route\n        {...rest}\n        render={props => (\n            <Layout>\n                <Component {...props} />\n            </Layout>\n        )}\n    />\n);\n\nexport default PublicRoute;\n","import React, { Fragment } from \"react\";\nimport { withRouter, Switch, Route } from \"react-router-dom\";\n\nimport {\n  AsyncAppLayout,\n  AsyncInternalServer,\n  AsyncNotFound,\n  AsyncForbidden,\n  AsyncJokes\n} from \"./AsyncComponent\";\nimport PublicRoute from \"../../route/PublicRoute\";\n\nconst App = () => (\n  <Fragment>\n    <Switch>\n      <PublicRoute\n        exact\n        path=\"/\"\n        layout={AsyncAppLayout}\n        component={AsyncJokes}\n      />\n      <PublicRoute path=\"/403\"  layout={AsyncAppLayout} component={AsyncForbidden} />\n      <PublicRoute path=\"/500\"  layout={AsyncAppLayout} component={AsyncInternalServer} />\n      <Route path=\"/404\"  layout={AsyncAppLayout} component={AsyncNotFound} />\n      <Route component={AsyncNotFound} />\n    </Switch>\n  </Fragment>\n);\n\nexport default withRouter(App);\n","import { createHashHistory as createHistory } from 'history';\n\n// a singleton history object\nconst history = createHistory({\n  hashType: 'slash',\n});\nexport default history;\n","import {\n   JOKE_FETCH_REQUEST,\n   JOKE_FETCH_REQUEST_SUCCESS,\n   JOKE_FETCH_REQUEST_FAILURE,\n   JOKE_CLEAN_REQUEST\n} from '../actions/actionTypes'\n\nconst INITIAL_STATE = {\n    payload: [],\n    loading: false,\n    errors: {},\n};\n\n/**\n * A reducer takes two arguments, the current state and an action.\n */\nconst jokesReducer = (state, action) => {\n    state = state || INITIAL_STATE;\n\n    switch (action.type) {\n        case JOKE_FETCH_REQUEST:\n            return Object.assign({}, state, {\n                loading: true,\n            });\n\n        case JOKE_FETCH_REQUEST_SUCCESS:\n            return Object.assign({}, state, {\n                payload: action.data,\n                loading: false,\n                errors: {},\n            });\n\n        case JOKE_FETCH_REQUEST_FAILURE:\n            return Object.assign({}, state, {\n                loading: false,\n                errors: action.error,\n            });\n\n        case JOKE_CLEAN_REQUEST:\n            return Object.assign({}, state, {\n                payload: [],\n                loading: false,\n                errors: {},\n            });\n\n        default:\n            return state;\n    }\n};\n\nexport default jokesReducer;\n","import {combineReducers} from 'redux';\nimport {connectRouter} from \"connected-react-router\";\n\nimport history from '../utility/history';\n\nimport jokesReducer from './jokesReducer';\n\nconst rootReducer = combineReducers({\n    router: connectRouter(history),\n    jokes: jokesReducer,\n});\n\nexport default rootReducer;\n","import {applyMiddleware, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport {routerMiddleware} from 'connected-react-router';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer from '../reducers';\n\nconst appStore = (initialState = {}, history) => {\n    // Add middleware\n    // 1. thunk middleware can also accept an extra argument to be passed to each thunk action\n    // https://github.com/gaearon/redux-thunk#injecting-a-custom-argument\n    // 2. routerMiddleware: Syncs the location/URL path to the state\n\n    const middlewares = [ thunk, routerMiddleware(history)];\n\n    return createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middlewares)));\n};\n\nexport default appStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Suspense} from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {ConnectedRouter} from 'connected-react-router';\nimport {Provider} from 'react-redux';\nimport ReactDOM from 'react-dom';\n\nimport './style/global.css';\nimport App from './containers/App'\nimport appStore from './store/appStore';\nimport * as serviceWorker from './serviceWorker';\nimport history from './utility/history';\n\nconst mountNode = document.getElementById('root')\nconst store = appStore({}, history);\n\nReactDOM.render(\n    <Suspense fallback={<div className=\"loader-container\">Error! Please refresh the page</div>}>\n        <Provider store={store}>\n            <ConnectedRouter history={history}>\n                <Router basename={process.env.PUBLIC_URL} history={history}>\n                    <App/>\n                </Router>\n            </ConnectedRouter>\n        </Provider>\n    </Suspense>,\n    mountNode);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}